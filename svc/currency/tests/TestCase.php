<?php

namespace Tests;

use Library\Exceptions\AuthException;
use App\Models\Dto\Currency\CurrencyDto;
use Library\Models\Eloquent\ModelHasRoles;
use App\Models\User;
use Illuminate\Foundation\Testing\TestCase as BaseTestCase;
use Tests\Traits\CreatesAuthAssignment;
use Tests\Traits\CreatesTestAuthToken;
use Illuminate\Support\Facades\DB;
use Throwable;

abstract class TestCase extends BaseTestCase
{
    /**
     * @var mixed
     */
    public $app;

    /**
     * @var string|bool
     */
    public string|bool $token;

    /**
     * @var object|null $user
     */
    public object|null $user = null;

    use CreatesApplication, CreatesTestAuthToken, CreatesAuthAssignment;

    /**
     * @param string|null $name
     * @param array $data
     * @param string $dataName
     * @throws AuthException
     */
    public function __construct(?string $name = null, array $data = [], string $dataName = '')
    {
        $this->app = $this->createApplication();

        $this->token = $this->createToken($this->app);

        $this->prepareAuth();

        parent::__construct($name, $data, $dataName);
    }

    /**
     * @return void
     */
    protected function tearDown(): void
    {
        /** @var User $user */
        $user = $this->app->make(User::class);

        /** @var ModelHasRoles $assignment */
        $assignment = $this->app->make(ModelHasRoles::class);

        if ($this->user) {
            $assignment->newQuery()
                ->where('model_id', '=', $this->user->id)
                ->delete();
        }

        $user->newQuery()
            ->where('email', '=', env('TEST_AUTH_EMAIL'))
            ->delete();

        $user->newQuery()
            ->where('email', '=', env('TEST_NOT_AUTH_EMAIL'))
            ->delete();
    }

    public static function tearDownAfterClass(): void
    {
        DB::table('currency')->truncate();
        DB::table('role_has_permissions')->truncate();

        parent::tearDownAfterClass(); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritDoc}
     */
    public function setUp(): void
    {
        $this->prepareAuth();
        $this->prepareCurrencyData();

        parent::setUp();
    }

    /**
     * TODO move to fixtures!!!
     *
     * @return void
     */
    public function prepareAuth(): void
    {
        try {
            DB::table('role_has_permissions')->insert([
                'permission_id' => 1,
                'role_id' => 1
            ]);

            DB::table('role_has_permissions')->insert([
                'permission_id' => 2,
                'role_id' => 1
            ]);

            DB::table('role_has_permissions')->insert([
                'permission_id' => 3,
                'role_id' => 1
            ]);

            DB::table('role_has_permissions')->insert([
                'permission_id' => 4,
                'role_id' => 1
            ]);
        } catch (Throwable) {}
    }

    /**
     * TODO move to fixtures!!!
     *
     * @return void
     */
    public function prepareCurrencyData(): void
    {
        try {
            DB::table('currency')->insert([
                'symbol' => '$',
                'code' => 'USD',
                'company' => CurrencyDto::DEFAULT_COMPANY_NAME,
                'is_main' => 1,
            ]);

            DB::table('currency')->insert([
                'symbol' => 'X',
                'code' => 'XXX',
                'company' => CurrencyDto::DEFAULT_COMPANY_NAME,
            ]);

            DB::table('currency')->insert([
                'symbol' => 'Y',
                'code' => 'YYY',
                'company' => CurrencyDto::DEFAULT_COMPANY_NAME,
            ]);

            $currencyUSD = DB::query()
                ->newQuery()
                ->from('currency')
                ->where('code', '=', 'USD')
                ->first();

            $currencyXXX = DB::query()
                ->newQuery()
                ->from('currency')
                ->where('code', '=', 'XXX')
                ->first();

            $currencyYYY = DB::query()
                ->newQuery()
                ->from('currency')
                ->where('code', '=', 'YYY')
                ->first();

            DB::table('currency_history')->insert([
                'currency_id' => $currencyUSD->id,
                'rate' => 1,
                'created_at' => '2022-11-24',
                'updated_at' => '2022-11-24',
            ]);

            DB::table('currency_history')->insert([
                'currency_id' => $currencyXXX->id,
                'rate' => 1.5,
                'created_at' => '2022-11-24',
                'updated_at' => '2022-11-24',
            ]);

            DB::table('currency_history')->insert([
                'currency_id' => $currencyYYY->id,
                'rate' => 2,
                'created_at' => '2022-11-24',
                'updated_at' => '2022-11-24',
            ]);

        } catch (Throwable) {}
    }
}
